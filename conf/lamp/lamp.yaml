pre_build:
  - path: stacker.hooks.keypair.ensure_keypair_exists
    required: true
    args:
      keypair: ${ssh_key_name}

mappings:
  AmiMap:
    us-east-1:
      NAT: ami-ad227cc4
      ubuntu1404: ami-74e27e1c
      bastion: ami-74e27e1c
      lamp: ami-98aa1cf0
    us-west-2:
      NAT: ami-290f4119
      ubuntu1404: ami-5189a661
      bastion: ami-5189a661
      lamp: ami-98aa1cf0

vpc_variables: &vpc_variables
  VpcId: ${output vpc::VpcId}
  DefaultSG: ${output vpc::DefaultSG}
  PublicSubnets: ${output vpc::PublicSubnets}
  PrivateSubnets: ${output vpc::PrivateSubnets}
  AvailabilityZones: ${output vpc::AvailabilityZones}

stacks:
  - name: vpc
    class_path: stacker_blueprints.vpc.VPC
    variables:
      # AZCount is the # of AvailabilityZones to attempt to build in. You
      # should build in as many as you can afford in order to provide for
      # better fault tolerance. Note: Since this is all done in a VPC, you
      # need to find out how many AZs can handle VPC subnets for the
      # region you are building in. As of this writing, here are the max
      # allowed AZCount's for each zone:
      #     us-east-1: 4, us-west-1: 2, us-west-2: 3, eu-west-1: 3
      # Note: The minimum allowed AZCount is 2.
      AZCount: ${azcount}
      # Enough subnets for 4 AZs
      # InstanceType used for NAT instances
      InstanceType: ${nat_instance_type}
      SshKeyName: ${ssh_key_name}
      InternalDomain: internal
      # CidrBlock needs to be hold all of the Public & Private subnets above
      CidrBlock: 10.128.0.0/16
      ImageName: NAT
      PublicSubnets: 
        - 10.128.0.0/24
        - 10.128.1.0/24
        - 10.128.2.0/24
        - 10.128.3.0/24
      PrivateSubnets: 
        - 10.128.8.0/22
        - 10.128.12.0/22
        - 10.128.16.0/22
        - 10.128.20.0/22
  - name: mysqlMaster
    class_path: stacker_blueprints.rds.mysql.MasterInstance
    variables:
      << : *vpc_variables
      Subnets: ${split ,::${output vpc::PrivateSubnets}}
      InstanceType: ${db_instance_type}
      AllowMajorVersionUpgrade: "false"
      AutoMinorVersionUpgrade: "false"
      AllocatedStorage: ${storage_size}
      IOPS: ${iops}
      InternalZoneName: ${output vpc::InternalZoneName}
      InternalZoneId: ${output vpc::InternalZoneId}
      InternalHostname: ${master_name}
      DBInstanceIdentifier: ${master_name}
      DBFamily: ${db_family}
      EngineVersion: ${engine_version}
      EngineMajorVersion: ${engine_major_version}
      StorageEncrypted: ${master_storage_encrypted}
      # MasterInstance specific
      MasterUser: ${db_user}
      MasterUserPassword: ${db_passwd}
      DatabaseName: ${db_name}
      MultiAZ: "false"
      # ExistingSecurityGroup: ${lamp::DBSecurityGroup}
  - name: lamp
    class_path: stacker_blueprints.lamp.Lamp
    variables: &lamp
      << : *vpc_variables
      InstanceType: ${lamp_instance_type}
      OfficeNetwork: ${trusted_network_cidr}
      SshKeyName: ${ssh_key_name}
      MinSize: 2
      MaxSize: 2
      DBEndPoint: ${output mysqlMaster::DBAddress}
      MasterUser: ${db_user}
      MasterUserPassword: ${db_passwd}
      DatabaseName: ${db_name}
      ImageName: lamp
      Subnets: ${split ,::${output vpc::PublicSubnets}}
      UserData: ${file parameterized-b64:file://userdata.yaml}
  - name: securityRules
    class_path: stacker_blueprints.security_rules.Rules
    variables:
      IngressRules:
        LampServerHTTPAccess:
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          GroupId: ${output lamp::ServerSecurityGroup}
          CidrIp: 0.0.0.0/0
        LampServerSSHAccess:
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          GroupId: ${output lamp::ServerSecurityGroup}
          CidrIp: ${trusted_network_cidr}
        LampDBHTTPAccess:
          IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          GroupId: ${output mysqlMaster::SecurityGroup}
          SourceSecurityGroupId: ${output lamp::ServerSecurityGroup}


